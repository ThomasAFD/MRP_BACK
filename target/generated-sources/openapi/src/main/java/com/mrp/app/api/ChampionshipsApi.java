/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mrp.app.api;

import com.mrp.app.domain.model.ChampionshipDTO;
import com.mrp.app.domain.model.ChampionshipToCreateDTO;
import com.mrp.app.domain.model.RankingToCreateDTO;
import com.mrp.app.domain.model.RoundToCreateDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-07T23:29:09.273407+02:00[Europe/Paris]")
@Validated
@Tag(name = "championships", description = "the championships API")
public interface ChampionshipsApi {

    default ChampionshipsApiDelegate getDelegate() {
        return new ChampionshipsApiDelegate() {};
    }

    /**
     * GET /championships : Get championship list
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "championshipsGet",
        summary = "Get championship list",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ChampionshipDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/championships",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<ChampionshipDTO>>> championshipsGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().championshipsGet(exchange);
    }


    /**
     * GET /championships/{idChampionship} : Get championship by id
     *
     * @param idChampionship  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "championshipsIdChampionshipGet",
        summary = "Get championship by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ChampionshipDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/championships/{idChampionship}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<ChampionshipDTO>> championshipsIdChampionshipGet(
        @Parameter(name = "idChampionship", description = "", required = true, schema = @Schema(description = "")) @PathVariable("idChampionship") String idChampionship,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().championshipsIdChampionshipGet(idChampionship, exchange);
    }


    /**
     * POST /championships/{idChampionship}/rounds/{idRound}/rankings : Create a ranking
     *
     * @param idChampionship  (required)
     * @param idRound  (required)
     * @param rankingToCreateDTO  (optional)
     * @return successful operation (status code 201)
     */
    @Operation(
        operationId = "championshipsIdChampionshipRoundsIdRoundRankingsPost",
        summary = "Create a ranking",
        responses = {
            @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ChampionshipDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/championships/{idChampionship}/rounds/{idRound}/rankings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<ChampionshipDTO>> championshipsIdChampionshipRoundsIdRoundRankingsPost(
        @Parameter(name = "idChampionship", description = "", required = true, schema = @Schema(description = "")) @PathVariable("idChampionship") String idChampionship,
        @Parameter(name = "idRound", description = "", required = true, schema = @Schema(description = "")) @PathVariable("idRound") String idRound,
        @Parameter(name = "RankingToCreateDTO", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) Mono<RankingToCreateDTO> rankingToCreateDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().championshipsIdChampionshipRoundsIdRoundRankingsPost(idChampionship, idRound, rankingToCreateDTO, exchange);
    }


    /**
     * POST /championships/{idChampionship}/rounds : Create a round
     *
     * @param idChampionship  (required)
     * @param roundToCreateDTO  (optional)
     * @return successful operation (status code 201)
     */
    @Operation(
        operationId = "championshipsIdChampionshipRoundsPost",
        summary = "Create a round",
        responses = {
            @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ChampionshipDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/championships/{idChampionship}/rounds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<ChampionshipDTO>> championshipsIdChampionshipRoundsPost(
        @Parameter(name = "idChampionship", description = "", required = true, schema = @Schema(description = "")) @PathVariable("idChampionship") String idChampionship,
        @Parameter(name = "RoundToCreateDTO", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) Mono<RoundToCreateDTO> roundToCreateDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().championshipsIdChampionshipRoundsPost(idChampionship, roundToCreateDTO, exchange);
    }


    /**
     * POST /championships : Create a championship
     *
     * @param championshipToCreateDTO  (optional)
     * @return successful operation (status code 201)
     */
    @Operation(
        operationId = "championshipsPost",
        summary = "Create a championship",
        responses = {
            @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ChampionshipDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/championships",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<ChampionshipDTO>> championshipsPost(
        @Parameter(name = "ChampionshipToCreateDTO", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) Mono<ChampionshipToCreateDTO> championshipToCreateDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().championshipsPost(championshipToCreateDTO, exchange);
    }

}
